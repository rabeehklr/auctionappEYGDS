Essential MERN Stack Files
Generated on: 2025-02-21 21:31:37
================================================================================

File: backend\.env
--------------------------------------------------------------------------------

PORT=5001
MONGODB_URI=mongodb://localhost:27017/auction-app
JWT_SECRET=your-secret-key-here


================================================================================

File: backend\package.json
--------------------------------------------------------------------------------

{
  "name": "auction-backend",
  "version": "1.0.0",
  "description": "Backend for Auction MERN application",
  "main": "server.js",
  "scripts": {
    "start": "node server.js",
    "dev": "nodemon server.js"
  },
  "dependencies": {
    "bcryptjs": "^2.4.3",
    "cors": "^2.8.5",
    "dotenv": "^16.4.1",
    "express": "^4.18.2",
    "jsonwebtoken": "^9.0.2",
    "mongoose": "^8.1.1",
    "morgan": "^1.10.0"
  },
  "devDependencies": {
    "nodemon": "^3.0.3"
  }
}

================================================================================

File: backend\server.js
--------------------------------------------------------------------------------

const express = require('express');
const mongoose = require('mongoose');
const cors = require('cors');
const morgan = require('morgan');
require('dotenv').config();

// Import routes
const authRoutes = require('./routes/auth.routes');

const app = express();

// Middleware
app.use(cors());
app.use(express.json());
app.use(morgan('dev'));

// Connect to MongoDB
mongoose.connect(process.env.MONGODB_URI)
    .then(() => console.log('Connected to MongoDB'))
    .catch(err => console.error('MongoDB connection error:', err));

// Routes
app.use('/', authRoutes);

// Basic error handling
app.use((err, req, res, next) => {
    console.error(err.stack);
    res.status(500).json({ message: 'Something went wrong!' });
});

const PORT = process.env.PORT || 5001;
app.listen(PORT, () => {
    console.log(`Server is running on port ${PORT}`);
});


================================================================================

File: backend\middleware\auth.middleware.js
--------------------------------------------------------------------------------

const jwt = require('jsonwebtoken');

const authMiddleware = (req, res, next) => {
    try {
        const token = req.headers.authorization?.split(' ')[1];
        
        if (!token) {
            return res.status(401).json({ message: 'Authentication required' });
        }

        const decoded = jwt.verify(token, process.env.JWT_SECRET);
        req.user = decoded;
        next();
    } catch (error) {
        return res.status(401).json({ message: 'Invalid or expired token' });
    }
};

module.exports = authMiddleware;


================================================================================

File: backend\models\user.model.js
--------------------------------------------------------------------------------

const mongoose = require('mongoose');

const userSchema = new mongoose.Schema({
    username: {
        type: String,
        required: true,
        unique: true,
        trim: true,
        minlength: 3
    },
    password: {
        type: String,
        required: true,
        minlength: 6
    }
}, {
    timestamps: true
});

module.exports = mongoose.model('User', userSchema);


================================================================================

File: backend\routes\auth.routes.js
--------------------------------------------------------------------------------

const router = require('express').Router();
const bcrypt = require('bcryptjs');
const jwt = require('jsonwebtoken');
const User = require('../models/user.model');

// Signup Route
router.post('/signup', async (req, res) => {
    try {
        const { username, password } = req.body;

        // Validate input
        if (!username || !password) {
            return res.status(400).json({ message: 'All fields are required' });
        }

        // Check if user exists
        const existingUser = await User.findOne({ username });
        if (existingUser) {
            return res.status(400).json({ message: 'Username already exists' });
        }

        // Hash password
        const salt = await bcrypt.genSalt(10);
        const hashedPassword = await bcrypt.hash(password, salt);

        // Create new user
        const newUser = new User({
            username,
            password: hashedPassword
        });

        await newUser.save();
        res.status(201).json({ message: 'User created successfully' });
    } catch (error) {
        console.error('Signup error:', error);
        res.status(500).json({ message: 'Error creating user' });
    }
});

// Signin Route
router.post('/signin', async (req, res) => {
    try {
        const { username, password } = req.body;

        // Validate input
        if (!username || !password) {
            return res.status(400).json({ message: 'All fields are required' });
        }

        // Find user
        const user = await User.findOne({ username });
        if (!user) {
            return res.status(401).json({ message: 'Invalid credentials' });
        }

        // Verify password
        const isValidPassword = await bcrypt.compare(password, user.password);
        if (!isValidPassword) {
            return res.status(401).json({ message: 'Invalid credentials' });
        }

        // Generate token
        const token = jwt.sign(
            { userId: user._id, username: user.username },
            process.env.JWT_SECRET,
            { expiresIn: '24h' }
        );

        res.json({ token });
    } catch (error) {
        console.error('Signin error:', error);
        res.status(500).json({ message: 'Error signing in' });
    }
});

module.exports = router;


================================================================================

File: frontend\package.json
--------------------------------------------------------------------------------

{
  "name": "auction-app",
  "version": "0.1.0",
  "private": true,
  "dependencies": {
    "@testing-library/jest-dom": "^5.17.0",
    "@testing-library/react": "^13.4.0",
    "@testing-library/user-event": "^13.5.0",
    "axios": "^1.7.7",
    "react": "^18.3.1",
    "react-dom": "^18.3.1",
    "react-router-dom": "^6.26.2",
    "react-scripts": "5.0.1",
    "web-vitals": "^2.1.4"
  },
  "scripts": {
    "start": "react-scripts start",
    "build": "react-scripts build",
    "test": "react-scripts test",
    "eject": "react-scripts eject"
  },
  "eslintConfig": {
    "extends": [
      "react-app",
      "react-app/jest"
    ]
  },
  "browserslist": {
    "production": [
      ">0.2%",
      "not dead",
      "not op_mini all"
    ],
    "development": [
      "last 1 chrome version",
      "last 1 firefox version",
      "last 1 safari version"
    ]
  }
}


================================================================================

File: frontend\src\App.js
--------------------------------------------------------------------------------

import React, { useState, useEffect } from 'react';
import { BrowserRouter as Router, Route, Routes, Link, useNavigate } from 'react-router-dom';
import Signup from './components/Signup';
import Signin from './components/Signin';
import Dashboard from './components/Dashboard';
import AuctionItem from './components/AuctionItem';
import PostAuction from './components/PostAuction';
import Landing from './components/Landing';
import UserProfile from './components/UserProfile';
import MyAuctions from './components/MyAuctions';
import 'bootstrap/dist/css/bootstrap.min.css';
import 'bootstrap/dist/js/bootstrap.bundle.min.js';
import './App.css';

function App() {
  const [isAuthenticated, setIsAuthenticated] = useState(false);
  const [user, setUser] = useState(null);

  useEffect(() => {
    const token = localStorage.getItem('authToken');
    const userData = localStorage.getItem('user');
    setIsAuthenticated(!!token);
    if (userData) {
      setUser(JSON.parse(userData));
    }
  }, []);

  const handleLogout = () => {
    localStorage.removeItem('authToken');
    localStorage.removeItem('user');
    setIsAuthenticated(false);
    setUser(null);
  };

  return (
    <Router>
      <div className="d-flex flex-column min-vh-100">
        <nav className="navbar navbar-expand-lg navbar-dark bg-primary">
          <div className="container">
            <Link className="navbar-brand d-flex align-items-center" to="/">
              <i className="bi bi-gavel me-2"></i>
              AuctionHub
            </Link>
            <button 
              className="navbar-toggler" 
              type="button" 
              data-bs-toggle="collapse" 
              data-bs-target="#navbarNav"
            >
              <span className="navbar-toggler-icon"></span>
            </button>
            <div className="collapse navbar-collapse" id="navbarNav">
              <ul className="navbar-nav me-auto">
                <li className="nav-item">
                  <Link className="nav-link" to="/dashboard">Browse Auctions</Link>
                </li>
                {isAuthenticated && (
                  <>
                    <li className="nav-item">
                      <Link className="nav-link" to="/my-auctions">My Auctions</Link>
                    </li>
                    <li className="nav-item">
                      <Link className="nav-link" to="/post-auction">Post Auction</Link>
                    </li>
                  </>
                )}
              </ul>
              <ul className="navbar-nav">
                {!isAuthenticated ? (
                  <>
                    <li className="nav-item">
                      <Link className="nav-link" to="/signup">Sign Up</Link>
                    </li>
                    <li className="nav-item">
                      <Link className="nav-link" to="/signin">Sign In</Link>
                    </li>
                  </>
                ) : (
                  <>
                    <li className="nav-item dropdown">
                      <a className="nav-link dropdown-toggle" href="#" role="button" data-bs-toggle="dropdown">
                        <i className="bi bi-person-circle me-1"></i>
                        {user?.username || 'Account'}
                      </a>
                      <ul className="dropdown-menu dropdown-menu-end">
                        <li>
                          <Link className="dropdown-item" to="/profile">
                            <i className="bi bi-person me-2"></i>Profile
                          </Link>
                        </li>
                        <li><hr className="dropdown-divider"/></li>
                        <li>
                          <button className="dropdown-item text-danger" onClick={handleLogout}>
                            <i className="bi bi-box-arrow-right me-2"></i>Logout
                          </button>
                        </li>
                      </ul>
                    </li>
                  </>
                )}
              </ul>
            </div>
          </div>
        </nav>

        <main className="flex-grow-1 py-4">
          <div className="container">
            <Routes>
              <Route path="/" element={<Landing />} />
              <Route path="/signup" element={<Signup />} />
              <Route path="/signin" element={<Signin />} />
              <Route path="/dashboard" element={<Dashboard />} />
              <Route path="/auction/:id" element={<AuctionItem />} />
              <Route path="/post-auction" element={<PostAuction />} />
              <Route path="/profile" element={<UserProfile />} />
              <Route path="/my-auctions" element={<MyAuctions />} />
            </Routes>
          </div>
        </main>

        <footer className="bg-dark text-light py-4 mt-auto">
          <div className="container">
            <div className="row">
              <div className="col-md-6">
                <h5>AuctionHub</h5>
                <p className="mb-0">Your trusted platform for online auctions</p>
              </div>
              <div className="col-md-6 text-md-end">
                <p className="mb-0">&copy; 2024 AuctionHub. All rights reserved.</p>
              </div>
            </div>
          </div>
        </footer>
      </div>
    </Router>
  );
}

export default App;

================================================================================

File: frontend\src\index.js
--------------------------------------------------------------------------------

import React from 'react';
import ReactDOM from 'react-dom/client';
import './index.css';
import App from './App';
import reportWebVitals from './reportWebVitals';

const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(
  <React.StrictMode>
    <App />
  </React.StrictMode>
);

// If you want to start measuring performance in your app, pass a function
// to log results (for example: reportWebVitals(console.log))
// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals
reportWebVitals();


================================================================================

File: frontend\src\components\AuctionItem.js
--------------------------------------------------------------------------------

import React, { useState, useEffect } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import axios from 'axios';

function AuctionItem() {
  const { id } = useParams();
  const navigate = useNavigate();
  const [item, setItem] = useState(null);
  const [bid, setBid] = useState('');
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState('');
  const [bidHistory, setBidHistory] = useState([]);
  const [timeLeft, setTimeLeft] = useState('');

  useEffect(() => {
    fetchAuctionData();
    const interval = setInterval(updateTimeLeft, 1000);
    return () => clearInterval(interval);
  }, [id]);

  const fetchAuctionData = async () => {
    try {
      const [itemResponse, bidsResponse] = await Promise.all([
        axios.get(`http://localhost:5001/api/auctions/${id}`),
        axios.get(`http://localhost:5001/api/auctions/${id}/bids`)
      ]);
      
      setItem(itemResponse.data);
      setBidHistory(bidsResponse.data);
      setLoading(false);
    } catch (err) {
      setError('Error loading auction details');
      setLoading(false);
    }
  };

  const updateTimeLeft = () => {
    if (item) {
      const end = new Date(item.closingTime).getTime();
      const now = new Date().getTime();
      const distance = end - now;

      if (distance < 0) {
        setTimeLeft('Auction ended');
        return;
      }

      const days = Math.floor(distance / (1000 * 60 * 60 * 24));
      const hours = Math.floor((distance % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
      const minutes = Math.floor((distance % (1000 * 60 * 60)) / (1000 * 60));
      const seconds = Math.floor((distance % (1000 * 60)) / 1000);

      setTimeLeft(`${days}d ${hours}h ${minutes}m ${seconds}s`);
    }
  };

  const handleBid = async (e) => {
    e.preventDefault();
    
    const token = localStorage.getItem('authToken');
    if (!token) {
      navigate('/signin');
      return;
    }

    if (parseFloat(bid) <= item.currentBid) {
      setError('Bid must be higher than current bid');
      return;
    }

    try {
      const response = await axios.post(
        `http://localhost:5001/api/auctions/${id}/bid`,
        { amount: bid },
        {
          headers: { Authorization: `Bearer ${token}` }
        }
      );

      if (response.data.success) {
        fetchAuctionData();
        setBid('');
        setError('');
      }
    } catch (err) {
      setError(err.response?.data?.message || 'Error placing bid');
    }
  };

  if (loading) {
    return (
      <div className="text-center py-5">
        <div className="spinner-border text-primary" role="status">
          <span className="visually-hidden">Loading...</span>
        </div>
      </div>
    );
  }

  if (!item) {
    return (
      <div className="alert alert-danger" role="alert">
        Auction not found
      </div>
    );
  }

  return (
    <div className="row">
      <div className="col-md-8">
        <div className="card shadow-sm mb-4">
          <div className="card-body">
            <h2 className="card-title">{item.itemName}</h2>
            <div className="badge bg-primary mb-3">{item.category}</div>
            
            {/* Image Carousel */}
            {item.images && item.images.length > 0 && (
              <div id="auctionImages" className="carousel slide mb-4" data-bs-ride="carousel">
                <div className="carousel-inner">
                  {item.images.map((img, index) => (
                    <div key={index} className={`carousel-item ${index === 0 ? 'active' : ''}`}>
                      <img src={img} className="d-block w-100" alt={`${item.itemName} - ${index + 1}`} />
                    </div>
                  ))}
                </div>
                {item.images.length > 1 && (
                  <>
                    <button className="carousel-control-prev" type="button" data-bs-target="#auctionImages" data-bs-slide="prev">
                      <span className="carousel-control-prev-icon" aria-hidden="true"></span>
                      <span className="visually-hidden">Previous</span>
                    </button>
                    <button className="carousel-control-next" type="button" data-bs-target="#auctionImages" data-bs-slide="next">
                      <span className="carousel-control-next-icon" aria-hidden="true"></span>
                      <span className="visually-hidden">Next</span>
                    </button>
                  </>
                )}
              </div>
            )}

            <div className="row mb-4">
              <div className="col-md-6">
                <h4>Current Bid: ${item.currentBid}</h4>
                <p className="text-muted">Starting Bid: ${item.startingBid}</p>
              </div>
              <div className="col-md-6 text-md-end">
                <h4 className={timeLeft === 'Auction ended' ? 'text-danger' : 'text-success'}>
                  {timeLeft}
                </h4>
                <p className="text-muted">End Time: {new Date(item.closingTime).toLocaleString()}</p>
              </div>
            </div>

            <div className="description mb-4">
              <h5>Description</h5>
              <p>{item.description}</p>
            </div>

            {timeLeft !== 'Auction ended' && (
              <form onSubmit={handleBid} className="bid-form">
                {error && <div className="alert alert-danger">{error}</div>}
                <div className="input-group mb-3">
                  <span className="input-group-text">$</span>
                  <input
                    type="number"
                    className="form-control"
                    value={bid}
                    onChange={(e) => setBid(e.target.value)}
                    placeholder="Enter your bid amount"
                    step="0.01"
                    min={item.currentBid + 0.01}
                    required
                  />
                  <button type="submit" className="btn btn-primary">Place Bid</button>
                </div>
                <small className="text-muted">
                  Minimum bid: ${(item.currentBid + 0.01).toFixed(2)}
                </small>
              </form>
            )}
          </div>
        </div>
      </div>

      <div className="col-md-4">
        <div className="card shadow-sm">
          <div className="card-header">
            <h5 className="card-title mb-0">Bid History</h5>
          </div>
          <div className="card-body">
            {bidHistory.length === 0 ? (
              <p className="text-muted">No bids yet</p>
            ) : (
              <div className="bid-history">
                {bidHistory.map((bid, index) => (
                  <div key={index} className="bid-entry border-bottom py-2">
                    <div className="d-flex justify-content-between">
                      <span className="bidder">{bid.username}</span>
                      <span className="bid-amount">${bid.amount}</span>
                    </div>
                    <small className="text-muted">
                      {new Date(bid.timestamp).toLocaleString()}
                    </small>
                  </div>
                ))}
              </div>
            )}
          </div>
        </div>
      </div>
    </div>
  );
}

export default AuctionItem;

================================================================================

File: frontend\src\components\Dashboard.js
--------------------------------------------------------------------------------

import React, { useState, useEffect } from 'react';
import { Link } from 'react-router-dom';
import axios from 'axios';

function Dashboard() {
  const [auctions, setAuctions] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState('');
  const [filters, setFilters] = useState({
    category: '',
    status: 'active',
    sort: 'newest'
  });
  const [searchTerm, setSearchTerm] = useState('');

  useEffect(() => {
    fetchAuctions();
  }, [filters]);

  const fetchAuctions = async () => {
    try {
      const queryParams = new URLSearchParams({
        ...filters,
        search: searchTerm
      });
      
      const response = await axios.get(`http://localhost:5001/api/auctions?${queryParams}`);
      setAuctions(response.data);
      setLoading(false);
    } catch (err) {
      setError('Error loading auctions');
      setLoading(false);
    }
  };

  const categories = [
    'All Categories',
    'Electronics',
    'Fashion',
    'Home & Garden',
    'Sports',
    'Collectibles',
    'Art',
    'Vehicles',
    'Other'
  ];

  const handleSearch = (e) => {
    e.preventDefault();
    fetchAuctions();
  };

  if (loading) {
    return (
      <div className="text-center py-5">
        <div className="spinner-border text-primary" role="status">
          <span className="visually-hidden">Loading...</span>
        </div>
      </div>
    );
  }

  return (
    <div className="dashboard">
      {/* Search and Filters */}
      <div className="card shadow-sm mb-4">
        <div className="card-body">
          <form onSubmit={handleSearch} className="row g-3">
            <div className="col-md-4">
              <input
                type="text"
                className="form-control"
                placeholder="Search auctions..."
                value={searchTerm}
                onChange={(e) => setSearchTerm(e.target.value)}
              />
            </div>
            <div className="col-md-2">
              <select
                className="form-select"
                value={filters.category}
                onChange={(e) => setFilters({...filters, category: e.target.value})}
              >
                {categories.map(cat => (
                  <option key={cat} value={cat === 'All Categories' ? '' : cat}>
                    {cat}
                  </option>
                ))}
              </select>
            </div>
            <div className="col-md-2">
              <select
                className="form-select"
                value={filters.status}
                onChange={(e) => setFilters({...filters, status: e.target.value})}
              >
                <option value="active">Active</option>
                <option value="ended">Ended</option>
                <option value="all">All</option>
              </select>
            </div>
            <div className="col-md-2">
              <select
                className="form-select"
                value={filters.sort}
                onChange={(e) => setFilters({...filters, sort: e.target.value})}
              >
                <option value="newest">Newest First</option>
                <option value="ending-soon">Ending Soon</option>
                <option value="price-low">Price: Low to High</option>
                <option value="price-high">Price: High to Low</option>
              </select>
            </div>
            <div className="col-md-2">
              <button type="submit" className="btn btn-primary w-100">Search</button>
            </div>
          </form>
        </div>
      </div>

      {error && (
        <div className="alert alert-danger" role="alert">
          {error}
        </div>
      )}

      {/* Auctions Grid */}
      <div className="row row-cols-1 row-cols-md-2 row-cols-lg-3 g-4">
        {auctions.map(auction => (
          <div key={auction._id} className="col">
            <div className="card h-100 shadow-sm">
              {auction.images && auction.images[0] && (
                <img 
                  src={auction.images[0]} 
                  className="card-img-top"
                  alt={auction.itemName}
                  style={{height: '200px', objectFit: 'cover'}}
                />
              )}
              <div className="card-body">
                <h5 className="card-title">{auction.itemName}</h5>
                <p className="card-text text-truncate">{auction.description}</p>
                <div className="d-flex justify-content-between align-items-center">
                  <span className="badge bg-primary">{auction.category}</span>
                  <h6 className="mb-0">Current Bid: ${auction.currentBid}</h6>
                </div>
              </div>
              <div className="card-footer bg-transparent">
                <div className="d-flex justify-content-between align-items-center">
                  <small className="text-muted">
                    {new Date(auction.closingTime) > new Date() ? 
                      `Ends: ${new Date(auction.closingTime).toLocaleDateString()}` :
                      'Auction Ended'
                    }
                  </small>
                  <Link to={`/auction/${auction._id}`} className="btn btn-outline-primary btn-sm">
                    View Details
                  </Link>
                </div>
              </div>
            </div>
          </div>
        ))}
      </div>

      {auctions.length === 0 && !loading && (
        <div className="text-center py-5">
          <h3>No auctions found</h3>
          <p className="text-muted">Try adjusting your search or filters</p>
        </div>
      )}
    </div>
  );
}

export default Dashboard;

================================================================================

File: frontend\src\components\Landing.js
--------------------------------------------------------------------------------


function Landing() 
{
return(<>
<div className='content'>
          <h2>Welcome to Auction App</h2>
          <p>
          An auction is usually a process of buying and selling goods or services by offering them up for bids, taking bids, and then selling the item to the highest bidder or buying the item from the lowest bidder. Some exceptions to this definition exist and are described in the section about different types.
          </p>
          </div>
          </>
)
}

export default Landing

================================================================================

File: frontend\src\components\PostAuction.js
--------------------------------------------------------------------------------

import React, { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import axios from 'axios';

function PostAuction() {
  const [formData, setFormData] = useState({
    itemName: '',
    description: '',
    startingBid: '',
    closingTime: '',
    category: '',
    images: []
  });
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState('');
  const navigate = useNavigate();

  useEffect(() => {
    const token = localStorage.getItem('authToken');
    if (!token) {
      navigate('/signin');
    }
  }, [navigate]);

  const handleInputChange = (e) => {
    const { name, value } = e.target;
    setFormData(prev => ({
      ...prev,
      [name]: value
    }));
  };

  const handleImageUpload = (e) => {
    const files = Array.from(e.target.files);
    setFormData(prev => ({
      ...prev,
      images: files
    }));
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    setLoading(true);
    setError('');

    const token = localStorage.getItem('authToken');
    if (!token) {
      setError('Please sign in to post an auction');
      setLoading(false);
      return;
    }

    try {
      const formDataToSend = new FormData();
      Object.keys(formData).forEach(key => {
        if (key === 'images') {
          formData.images.forEach(image => {
            formDataToSend.append('images', image);
          });
        } else {
          formDataToSend.append(key, formData[key]);
        }
      });

      const response = await axios.post(
        'http://localhost:5001/api/auctions',
        formDataToSend,
        {
          headers: {
            'Authorization': `Bearer ${token}`,
            'Content-Type': 'multipart/form-data'
          }
        }
      );

      if (response.data.success) {
        navigate('/my-auctions');
      }
    } catch (err) {
      setError(err.response?.data?.message || 'Failed to post auction. Please try again.');
    } finally {
      setLoading(false);
    }
  };

  const categories = [
    'Electronics',
    'Fashion',
    'Home & Garden',
    'Sports',
    'Collectibles',
    'Art',
    'Vehicles',
    'Other'
  ];

  return (
    <div className="row justify-content-center">
      <div className="col-md-8">
        <div className="card shadow">
          <div className="card-header bg-primary text-white">
            <h3 className="card-title mb-0">Post New Auction</h3>
          </div>
          <div className="card-body">
            {error && (
              <div className="alert alert-danger" role="alert">
                {error}
              </div>
            )}
            
            <form onSubmit={handleSubmit}>
              <div className="mb-3">
                <label className="form-label">Item Name</label>
                <input
                  type="text"
                  name="itemName"
                  className="form-control"
                  value={formData.itemName}
                  onChange={handleInputChange}
                  required
                />
              </div>

              <div className="mb-3">
                <label className="form-label">Category</label>
                <select
                  name="category"
                  className="form-select"
                  value={formData.category}
                  onChange={handleInputChange}
                  required
                >
                  <option value="">Select a category</option>
                  {categories.map(category => (
                    <option key={category} value={category}>{category}</option>
                  ))}
                </select>
              </div>

              <div className="mb-3">
                <label className="form-label">Description</label>
                <textarea
                  name="description"
                  className="form-control"
                  rows="4"
                  value={formData.description}
                  onChange={handleInputChange}
                  required
                ></textarea>
              </div>

              <div className="row">
                <div className="col-md-6 mb-3">
                  <label className="form-label">Starting Bid ($)</label>
                  <input
                    type="number"
                    name="startingBid"
                    className="form-control"
                    value={formData.startingBid}
                    onChange={handleInputChange}
                    min="0"
                    step="0.01"
                    required
                  />
                </div>

                <div className="col-md-6 mb-3">
                  <label className="form-label">Auction End Date/Time</label>
                  <input
                    type="datetime-local"
                    name="closingTime"
                    className="form-control"
                    value={formData.closingTime}
                    onChange={handleInputChange}
                    required
                  />
                </div>
              </div>

              <div className="mb-3">
                <label className="form-label">Images</label>
                <input
                  type="file"
                  className="form-control"
                  accept="image/*"
                  multiple
                  onChange={handleImageUpload}
                />
                <small className="text-muted">You can upload multiple images (max 5)</small>
              </div>

              <div className="d-grid">
                <button
                  type="submit"
                  className="btn btn-primary"
                  disabled={loading}
                >
                  {loading ? (
                    <>
                      <span className="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
                      Posting...
                    </>
                  ) : (
                    'Post Auction'
                  )}
                </button>
              </div>
            </form>
          </div>
        </div>
      </div>
    </div>
  );
}

export default PostAuction;

================================================================================

File: frontend\src\components\Signin.js
--------------------------------------------------------------------------------

import React, { useState } from 'react';
import axios from 'axios';
import { useNavigate } from 'react-router-dom';

function Signin() {
  const [username, setUsername] = useState('');
  const [password, setPassword] = useState('');
  const [error, setError] = useState('');
  const navigate = useNavigate();

  const handleSignin = async (e) => {
    e.preventDefault();
    setError('');

    try {
      const res = await axios.post('http://localhost:5001/signin', { username, password });
      console.log('Signin Response:', res.data);

      if (res.data.token) {
        localStorage.setItem('authToken', res.data.token);
        navigate('/dashboard'); // Redirect to dashboard
      } else {
        setError('Invalid credentials');
      }
    } catch (err) {
      console.error('Signin Request Error:', err.response?.data || err.message);
      setError(err.response?.data?.message || 'Something went wrong. Please try again.');
    }
  };

  return (
    <div className="form-container">
      <h2>Signin</h2>
      {error && <p className="error">{error}</p>}
      <form onSubmit={handleSignin}>
        <input
          type="text"
          placeholder="Username"
          value={username}
          onChange={(e) => setUsername(e.target.value)}
          required
        />
        <input
          type="password"
          placeholder="Password"
          value={password}
          onChange={(e) => setPassword(e.target.value)}
          required
        />
        <button type="submit">Signin</button>
      </form>
    </div>
  );
}

export default Signin;


================================================================================

File: frontend\src\components\Signup.js
--------------------------------------------------------------------------------

import React, { useState } from 'react';
import axios from 'axios';
import { useNavigate } from 'react-router-dom';

function Signup() {
  const [username, setUsername] = useState('');
  const [password, setPassword] = useState('');
  const [error, setError] = useState('');
  const navigate = useNavigate();

  const handleSignup = async (e) => {
    e.preventDefault();
    setError('');

    if (!username || !password) {
      setError('Username and password are required');
      return;
    }

    try {
      const res = await axios.post('http://localhost:5001/signup', {
        username,
        password
      });

      alert('Signup successful! Please sign in.');
      navigate('/signin'); // Redirect to signin page
    } catch (err) {
      console.error('Signup Error:', err.response?.data || err.message);
      setError(err.response?.data?.message || 'Signup failed. Please try again.');
    }
  };

  return (
    <div className="form-container">
      <h2>Signup</h2>
      {error && <p className="error">{error}</p>}
      <form onSubmit={handleSignup}>
        <input
          type="text"
          placeholder="Username"
          value={username}
          onChange={(e) => setUsername(e.target.value)}
          required
        />
        <input
          type="password"
          placeholder="Password"
          value={password}
          onChange={(e) => setPassword(e.target.value)}
          required
        />
        <button type="submit">Signup</button>
      </form>
    </div>
  );
}

export default Signup;


================================================================================

